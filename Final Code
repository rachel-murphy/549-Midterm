
```{r}
# load the dataset and change all variable types to integers so that the correlations work. then produce the correlation matrix
hd.orig <- read.csv("processed.heartdisease.txt")
hd<-hd.orig
hd$ca <- replace(hd$ca,hd$ca=="?","NA")
hd$thal <- replace(hd$thal,hd$ca=="?","NA")
hd$ca <- as.numeric(hd$ca)
hd$thal <- as.numeric(hd$thal)
hd<-na.omit(hd)
head(hd)
```


```{r}
hd$heartDisease <- ifelse(hd$num > 0,1,0) # making variable for just predicting heart disease, not severity
head(hd)
hd_part5 <- hd[,c(1:13,15)] # taking out original variable for heart disease since we won't use it with this model
head(hd_part5)
```

```{r}
# partition
set.seed(55)  
train.index <- sample(c(1:dim(hd_part5)[1]), dim(hd_part5)[1]*0.5)  
train.df <- hd_part5[train.index, ]
holdout <- hd_part5[-train.index, ]

# validation set is 30% of the remaining 50%
valid.index <- sample(c(1:dim(holdout)[1]), dim(holdout)[1]*(.3/.5))
valid.df <- holdout[valid.index, ]
test.df <- holdout[-valid.index, ] # idk if we really need this partition but thats what was in my notes
```

```{r}
# fit the null and full models
null.model <- glm(heartDisease~1,data=train.df,family="binomial")
full.model <- glm(heartDisease~.,data=train.df,family="binomial")

# search for best AIC model
step.out <- step(null.model,scope=list(lower=null.model,upper=full.model),
                 direction="both")
# accoring to AIC, the best model is heartDisease ~ exang + sex + cp + thalach + chol + trestbps
```

```{r}
# fit the model
out.train <- glm(heartDisease~exang + ca + thal + thalach + cp + sex + trestbps,
                 data=train.df,family="binomial")
head(train.df)
# get predicted values
pred.train <- predict(out.train,train.df[,-14],type="response")

# get the confusion matrix
library(caret)
confusionMatrix(as.factor(ifelse(pred.train > 0.5, 1, 0)),
                as.factor(train.df$heartDisease),positive="1")
```

```{r}
# find the cutoff that provides the highest accuracy               
cut <- seq(from=.01,to=.99,by=.01)

# initialize a data frame with two columns: k, and accuracy
accuracy.df <- data.frame(Probability = cut, Accuracy = rep(0, length(cut)))

for(i in 1:length(cut)) {
accuracy.df[i,2] <- confusionMatrix(as.factor(ifelse(pred.train > cut[i], 1, 0)),
                                    as.factor(train.df$heartDisease),
                                    positive="1")$overall[1]
}

max.cut.lr <- accuracy.df[which.max(accuracy.df[,2]),]
max.cut.lr
```

```{r}
library(caret)
confusionMatrix(as.factor(ifelse(pred.train > max.cut.lr[1,1], 1, 0)),
                as.factor(train.df$heartDisease),positive="1")
```

```{r}
# now with validation data
# fit the model
out.valid <- glm(heartDisease~thal + ca + oldpeak + cp + sex + restecg,
                 data=valid.df,family="binomial")
summary(out.valid)

# get predictions and make classification matrix
pred.valid <- predict(out.valid,valid.df[,-11],type="response")

library(caret)
confusionMatrix(as.factor(ifelse(pred.valid > max.cut.lr[1,1], 1, 0)),
                as.factor(valid.df$heartDisease), positive="1")
```

```{r}
install.packages("sjmisc","magrittr")
library(sjmisc)
library(magrittr)
```

```{r}
head(hd_part5)
# initializing new patient data for prediction

newobs <- rbind( c(60,0,3,102,318,0,0,160,0,0,1,1.0,3.0) )
dimnames(newobs) <- list(NULL,c('age','sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal'))
newobs.df<-data.frame(newobs)
head(newobs.df)
# newobs.df$ca <- factor(newobs.df$ca, levels=levels(hd$ca))
# newobs.df$thal <- factor(newobs.df$thal, levels=levels(hd$thal))

pred.new.patient <- predict(out.valid,newobs.df,type="response")
pred.new.patient
ifelse(pred.new.patient<max.cut.lr[1,1],"Patient is predicted to not develop heart disease", "Patient is predicted to develop heart disease")
```

```{r}
head(hd)
hd_part7 <- hd
head(hd_part7)
```

```{r}
library(MASS)
library(Hmisc)
library(reshape)
library(foreign)
library(ggplot2)
```

```{r}
# partition
set.seed(69)  
train.index7 <- sample(c(1:dim(hd_part7)[1]), dim(hd_part7)[1]*0.5)  
train.df7 <- hd_part7[train.index7, ]
holdout7 <- hd_part7[-train.index7, ]

# validation set is 30% of the remaining 50%
valid.index7 <- sample(c(1:dim(holdout7)[1]), dim(holdout7)[1]*(.3/.5))
valid.df7 <- holdout7[valid.index7, ]
test.df7 <- holdout7[-valid.index7, ]

pt7 <- polr(as.factor(num)~., data=train.df7, Hess=TRUE)
summary(pt7)
hd_pred <- predict(pt7, train.df7)

mean(hd_pred == train.df7$num)

table(predicted=hd_pred, actual=train.df7$num)
```

right now we're looking at ~62% accuracy on training data.

```{r}
hd_pred_valid <- predict(pt7, valid.df7)

mean(hd_pred_valid == valid.df7$num)

table(predicted=hd_pred_valid, actual=valid.df7$num)
```


```{r}
pred.new.patient.pt7 <- predict(pt7,newobs,type="probs")
pred.new.patient.pt7
```
based on this model, the new patient has a 97% chance of not having heart disease of any kind
